/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Copy, Clone)]
pub struct foo<T> {
    pub large: [::std::os::raw::c_int; 33usize],
    pub data: T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
impl<T> Default for foo<T> {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl<T> ::std::cmp::PartialEq for foo<T>
where
    T: PartialEq,
{
    fn eq(&self, other: &foo<T>) -> bool {
        &self.large[..] == &other.large[..] && self.data == other.data
    }
}
